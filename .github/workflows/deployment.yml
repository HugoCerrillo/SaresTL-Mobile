name: Test API in PythonAnywhere

on:
  push:
    branches:
      - master
      - test-branch
      - hugo-branch
      - joseph-branch
      - goretti-branch
  pull_request:

jobs:
  test-api:
    runs-on: ubuntu-latest

    steps:
    - name: Test /api/login
      run: |
        response=$(curl -s -w "%{http_code}" -o response.json -X POST https://hugoc.pythonanywhere.com/api/login \
          -H "Content-Type: application/json" \
          -d '{"username":"010", "password":"1234"}')

        if [ "$response" -ne 200 ]; then
          echo "Error: La respuesta HTTP no es 200, código de estado: $response"
          cat response.json
          exit 1
        fi

        # Verificar el contenido de la respuesta JSON
        status=$(jq -r '.status' response.json)
        clave=$(jq -r '.clave' response.json)

        if [ "$status" != "success" ]; then
          echo "Error: El status no es 'success'"
          cat response.json
          exit 1
        fi

        if [ -z "$clave" ]; then
          echo "Error: No se encontró el valor de 'clave' en la respuesta"
          cat response.json
          exit 1
        fi

        echo "Prueba de login exitosa"

    # Test para el endpoint /api/usertype
    - name: Test /api/usertype
      run: |
        response=$(curl -s -w "%{http_code}" -o response.json -X POST https://hugoc.pythonanywhere.com/api/usertype \
          -H "Content-Type: application/json" \
          -d '{"user":"010"}')

        if [ "$response" -ne 200 ] && [ "$response" -ne 401 ]; then
          echo "Error: La respuesta HTTP no es ni 200 ni 401, código de estado: $response"
          cat response.json
          exit 1
        fi

        # Verificar el contenido de la respuesta JSON
        status=$(jq -r '.status' response.json)
        user_name=$(jq -r '.userName' response.json)
        user_role=$(jq -r '.userRole' response.json)
        user_type_inst=$(jq -r '.userTypeInst' response.json)

        if [ "$status" != "success" ] && [ "$status" != "error" ]; then
          echo "Error: El status no es 'success' ni 'error'"
          cat response.json
          exit 1
        fi

        # Si el status es success, validamos los campos de respuesta
        if [ "$status" == "success" ]; then
          if [ -z "$user_name" ] || [ -z "$user_role" ] || [ -z "$user_type_inst" ]; then
            echo "Error: Los valores de 'userName', 'userRole' o 'userTypeInst' están vacíos"
            cat response.json
            exit 1
          fi
        fi

        echo "Prueba de usertype exitosa"

    # Nuevo paso para probar /api/verifyEmail
    - name: Test /api/verifyEmail
      run: |
        response=$(curl -s -w "%{http_code}" -o response.json -X POST https://hugoc.pythonanywhere.com/api/verifyEmail \
          -H "Content-Type: application/json" \
          -d '{"email":"pruebas@gmail.com"}')

        if [ "$response" -ne 200 ] && [ "$response" -ne 401 ]; then
          echo "Error: La respuesta HTTP no es ni 200 ni 401, código de estado: $response"
          cat response.json
          exit 1
        fi

        # Verificar el contenido de la respuesta JSON
        status=$(jq -r '.status' response.json)
        user_mail=$(jq -r '.userMail' response.json)
        user_id=$(jq -r '.userId' response.json)

        if [ "$status" != "success" ] && [ "$status" != "error" ]; then
          echo "Error: El status no es 'success' ni 'error'"
          cat response.json
          exit 1
        fi

        # Si el status es success, validamos los campos de respuesta
        if [ "$status" == "success" ]; then
          if [ -z "$user_mail" ] || [ -z "$user_id" ]; then
            echo "Error: Los valores de 'userMail' o 'userId' están vacíos"
            cat response.json
            exit 1
          fi
        fi

        echo "Prueba de verifyEmail exitosa"

    # Nuevo paso para probar /api/get_personal_registration
    - name: Test /api/get_personal_registration
      run: |
        response=$(curl -s -w "%{http_code}" -o response.json -X POST https://hugoc.pythonanywhere.com/api/get_personal_registration \
          -H "Content-Type: application/json" \
          -d '{"clave":"010"}')

        if [ "$response" -ne 200 ] && [ "$response" -ne 401 ]; then
          echo "Error: La respuesta HTTP no es ni 200 ni 401, código de estado: $response"
          cat response.json
          exit 1
        fi

        # Verificar el contenido de la respuesta JSON
        status=$(jq -r '.status' response.json)

        if [ "$status" == "error" ]; then
          message=$(jq -r '.message' response.json)
          if [ "$message" == "No se encontraron registros" ]; then
            echo "No se encontraron registros, esto es esperado"
          else
            echo "Error: El mensaje no es 'No se encontraron registros'"
            cat response.json
            exit 1
          fi
        elif [ "$status" == "success" ]; then
          records=$(jq -r '.records' response.json)

          # Verificar que los registros no estén vacíos
          if [ -z "$records" ]; then
            echo "Error: No se encontraron registros en 'records'"
            cat response.json
            exit 1
          else
            echo "Prueba de get_personal_registration exitosa"
          fi
        else
          echo "Error: El status no es 'success' ni 'error'"
          cat response.json
          exit 1
        fi
